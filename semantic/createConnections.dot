digraph SemanticConnections {

  node [shape=Mrecord,style=filled,fillcolor="#428bca",rank=same];

  createConns [label="createConns\n(CreateConnections)|{ <in> in|<out> out }|{ <chainIn> chainIn|<chainOut> chainOut }"] ;
  verifyOutPorts [label="verifyOutPorts\n(VerifyOutPortsUsedOnlyOnce)|{ <in> in|<out> out }"] ;
  handleChainBeg [label="handleChainBeg\n(HandleChainBeg)|{ <in> in|<out> out }|{ <addOpIn> addOpIn|<addOpOut> addOpOut }"] ;
  handleChainMids [label="handleChainMids\n(HandleChainMids)|{ <in> in|<out> out }|{ <addOpIn> addOpIn|<addOpOut> addOpOut }"] ;
  handleChainEnd [label="handleChainEnd\n(HandleChainEnd)|{ <in> in|<out> out }"] ;
  begAddLastOp [label="begAddLastOp\n(AddLastOp)|{ <in> in|<out> out }"] ;
  midAddLastOp [label="midAddLastOp\n(AddLastOp)|{ <in> in|<out> out }"] ;

  node [shape=plaintext,style=plain,rank=same];

  "in" -> createConns:in [label="ParserData"] ;
  createConns:out -> verifyOutPorts:in ;
  verifyOutPorts:out -> "out" ;
  createConns:chainOut -> handleChainBeg:in [label="ParserData"] ;
  handleChainBeg:out -> handleChainMids:in ;
  handleChainMids:out -> handleChainEnd:in ;
  handleChainEnd:out -> createConns:chainIn ;
  handleChainBeg:addOpOut -> begAddLastOp:in [label="ParserData"] ;
  begAddLastOp:out -> handleChainBeg:addOpIn ;
  handleChainMids:addOpOut -> midAddLastOp:in [label="ParserData"] ;
  midAddLastOp:out -> handleChainMids:addOpIn ;
}
