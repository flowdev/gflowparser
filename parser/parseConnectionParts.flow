version 0.1

// semantic result: op data.Operation{+InPorts, +OutPorts}
flow ParseConnectionPart {
  [ParserData]-> connPart(ParseAll) -> ;
  connPart() semOut [ParserData]-> (SemanticCreateConnectionPart) -> semIn connPart() ;

  connPart() subOut.0 [ParserData]-> optInPort(ParseOptPortSpc) -> subIn connPart() ;
  connPart() subOut.1 [ParserData]-> opNameParens(ParseOperationNameParens) -> subIn connPart() ;
  connPart() subOut.2 [ParserData]-> optOutPort(ParseOptPort) -> subIn connPart() ;
}

// semantic result: op data.Operation{Name, Type, SrcPos}
flow ParseOperationNameParens {
  [ParserData]-> opNameParens(ParseAll) -> ;
  opNameParens() semOut [ParserData]-> semantic(SemanticCreateOperationNameParens) -> semIn opNameParens() ;

  opNameParens() subOut.0 [ParserData]-> optOpName(ParseOptional) -> subIn opNameParens() ;
  // config: literal = "("
  opNameParens() subOut.1 [ParserData]-> openType(ParseLiteral) -> subIn opNameParens() ;
  opNameParens() subOut.2 [ParserData]-> spc1(ParseOptSpc) -> subIn opNameParens() ;
  opNameParens() subOut.3 [ParserData]-> optOpType(ParseOptOperationType) -> subIn opNameParens() ;
  // config: literal = ")"
  opNameParens() subOut.4 [ParserData]-> closeType(ParseLiteral) -> subIn opNameParens() ;
  opNameParens() subOut.5 [ParserData]-> spc2(ParseOptSpc) -> subIn opNameParens() ;

  optOpName() subOut [ParserData]-> opName(ParseAll) -> subIn optOpName() ;
  opName() subOut.0 [ParserData]-> smallIdent(ParseSmallIdent) -> subIn opName() ;
  opName() subOut.1 [ParserData]-> spc3(ParseOptSpc) -> subIn opName() ;
}

// semantic result: bigIdentOperationType string
flow ParseOptOperationType {
  [ParserData]-> optOpType(ParseOptional) -> ;
  optOpType() subOut [ParserData]-> opType(ParseAll) -> subIn optOpType() ;
  opType() semOut [ParserData]-> (SemanticCreateOperationType) -> semIn opType() ;

  opType() subOut.0 [ParserData]-> (ParseBigIdent) -> subIn opType() ;
  opType() subOut.1 [ParserData]-> (ParseOptSpc) -> subIn opType() ;
}

// semantic result: bigIdentType string
flow ParseArrow {
  [ParserData]-> arrow(ParseAll) -> ;
  arrow() semOut [ParserData]-> (SemanticCreateArrow) -> semIn arrow() ;

  arrow() subOut.0 [ParserData]-> spcCom1(ParseSpaceComment) -> subIn arrow() ;
  arrow() subOut.1 [ParserData]-> optType(ParseOptional) -> subIn arrow() ;
  arrow() subOut.2 [ParserData]-> optCall(ParseOptional) -> subIn arrow() ;
  // config: literal = "->"
  arrow() subOut.3 [ParserData]-> litArr(ParseLiteral) -> subIn arrow() ;
  arrow() subOut.4 [ParserData]-> spcCom2(ParseSpaceComment) -> subIn arrow() ;

  optType() subOut [ParserData]-> type(ParseAll) -> subIn optType() ;

  // config: regex = "[saip]"
  optCall() subOut [ParserData]-> call(ParseRegexp) -> subIn optCall() ;

  // config: literal = "["
  type() subOut.0 [ParserData]-> openType(ParseLiteral) -> subIn type() ;
  type() subOut.1 [ParserData]-> spc1(ParseOptSpc) -> subIn type() ;
  type() subOut.2 [ParserData]-> typeName(ParseBigIdent) -> subIn type() ;
  type() subOut.3 [ParserData]-> spc2(ParseOptSpc) -> subIn type() ;
  // config: literal = "]"
  type() subOut.4 [ParserData]-> closeType(ParseLiteral) -> subIn type() ;
}

// semantic result: port data.Port
flow ParseOptPortSpc {
  [ParserData]-> optPortSpc(ParseOptional) -> ;
  optPortSpc() subOut [ParserData]-> portSpc(ParseAll) -> subIn optPortSpc() ;

  portSpc() semOut [ParserData]-> (SemanticCreatePortSpc) -> semIn portSpc() ;

  portSpc() subOut.0 [ParserData]-> pport(ParsePort) -> subIn portSpc() ;
  // config: acceptNewLine = false
  portSpc() subOut.1 [ParserData]-> space(ParseSpace) -> subIn portSpc() ;
}

// semantic result: port data.Port
flow ParseOptPort {
  [ParserData]-> optPort(ParseOptional) -> ;
  optPort() subOut [ParserData]-> pport(ParsePort) -> subIn optPort() ;
}

// semantic result: port data.Port
flow ParsePort {
  [ParserData]-> port(ParseAll) -> ;
  port() semOut [ParserData]-> semantic(SemanticCreatePort) -> semIn port() ;

  port() subOut.0 [ParserData]-> portName(ParseSmallIdent) -> subIn port() ;
  port() subOut.1 [ParserData]-> optPortNum(ParseOptional) -> subIn port() ;

  optPortNum() subOut [ParserData]-> portNum(ParseAll) -> subIn optPortNum() ;

  // config: literal = "."
  portNum() subOut.0 [ParserData]-> dot(ParseLiteral) -> subIn portNum() ;
  // config: radix = 10
  portNum() subOut.1 [ParserData]-> num(ParseNatural) -> subIn portNum() ;
}
